/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "xgpio.h"
#include "platform.h"
#include "xparameters.h"

XGpio led_output;
XGpio keypad_input;

void multiplication();
void rockPaperScissors();
int processInputs(int playerOneVal, int playerTwoVal);

int main()
{
    XGpio_Initialize(&led_output, XPAR_LEDS_8BIT_DEVICE_ID);
    XGpio_SetDataDirection(&led_output, 1, 0x00000000);

    // TODO Add this initialization here
    XGpio_Initialize(&keypad_input, XPAR_KEYPAD_GPIO_DEVICE_ID);
    XGpio_SetDataDirection(&keypad_input, 1, 0x0F);
    init_platform();

    char mode;
    xil_printf("Enter option: 'm' for multiplication, 'g' for rock-paper-scissors:\r\n");
    mode = getc(stdin);
    getchar(); // get rid of nullbyte
    xil_printf("\r\n");
    while (mode == 'm' || mode == 'M' || mode == 'g' || mode == 'G')
    {
        getchar();

        if (mode == 'm' || mode == 'M')
        {
            multiplication();
        }
        else if (mode == 'g' || mode == 'G')
        {
            rockPaperScissors();
        }
        xil_printf("Enter option: 'm' for multiplication, 'g' for rock-paper-scissors:\r\n");
        mode = getc(stdin);
        xil_printf("%c", mode);
        getchar(); // get rid of nullbyte
        xil_printf("\r\n");
        XGpio_DiscreteWrite(&led_output, 1, 0); // clear LED
    }
    xil_printf("Exiting program...\r\n");
    return 0;
}

/**
 * This function plays the rock paper scissors game between a serial player and 
 * a player inputting from a Digilent keypad.
 */
void rockPaperScissors()
{
    char input;
    char inputp;
    int counter = 0;

    xil_printf("Starting rock paper scissors. Player one get ready ... \r\n");

    while (1){
    	int playerOneVal, playerTwoVal;
		char a[3][10];
		strcpy(a[0], "ROCK");
		strcpy(a[1], "PAPER");
		strcpy(a[2], "SCISSORS");

		do{
			counter = 0;
			xil_printf("Player 1 enter your input (1 = rock, 2 = paper, 3 = scissors): ");
			input = getc(stdin);
			counter++;
			do{
				inputp = getc(stdin);
				counter++;
			}
			while(inputp != '\r');
		}
		while(input != '1' && input != '2' && input != '3' || counter >= 2);

		playerOneVal = input - '1';
		xil_printf("Player 2 enter your input (1 = rock, 2 = paper, 3 = scissors): ");

		int inputData = 0;
		int column_index = 0;
		while (1)
		{

			XGpio_DiscreteWrite(&keypad_input, 1, 0xE0);
			inputData = XGpio_DiscreteRead(&keypad_input, 1);
			// xil_printf("%d \r\n", inputData);
			if (inputData == 238)
				break;
			XGpio_DiscreteWrite(&keypad_input, 1, 0xD0);
			inputData = XGpio_DiscreteRead(&keypad_input, 1);
			// xil_printf("%d \r\n", inputData);
			if (inputData == 222)
				break;
			XGpio_DiscreteWrite(&keypad_input, 1, 0xB0);
			inputData = XGpio_DiscreteRead(&keypad_input, 1);
			// xil_printf("%d \r\n", inputData);
			if (inputData == 190)
				break;

			XGpio_DiscreteWrite(&keypad_input, 1, 0x70);
			inputData = XGpio_DiscreteRead(&keypad_input, 1);
			// xil_printf("%d \r\n", inputData);
		}

		if (inputData == 238){
			xil_printf("1 as rock");
			playerTwoVal = 0;
		}
		else if (inputData == 222){
			xil_printf("2 as paper");
			playerTwoVal = 1;
		}
		else{
			xil_printf("3 as scissors");
			playerTwoVal = 2;
		}


		int outcome = processInputs(playerOneVal, playerTwoVal);
		xil_printf("\r\n");
		if (outcome == 1)
		{
			xil_printf("The game is a tie (%s = %s)\r\n", a[playerOneVal], a[playerTwoVal]);
		}
		else if (outcome == 0)
		{
			xil_printf("Player One won! (%s > %s)\r\n", a[playerOneVal], a[playerTwoVal]);
		}
		else if (outcome == 2)
		{
			xil_printf("Player Two won! (%s < %s)\r\n", a[playerOneVal], a[playerTwoVal]);
		}
		while((getchar()) != '\r');
    }
}

/**
 * This function compares the hands and returns 0 if player 1 wins, 2 if player 
 * 2 wins and 1 if it is a tie
 * 
 * @param playerOneVal  int     The value of player 1
 * @param playerTwoVal  int     The value of player 2
 * @return int                  Which side won (or tied)
 */
int processInputs(int playerOneVal, int playerTwoVal)
{
    if (playerOneVal == 0)
    {
        if (playerTwoVal == 0)
            return 1;
        if (playerTwoVal == 1)
            return 2;
        return 0;
    }
    else if (playerOneVal == 1)
    {
        if (playerTwoVal == 1)
            return 1;
        if (playerTwoVal == 2)
            return 2;
        return 0;
    }
    else if (playerOneVal == 2)
    {
        if (playerTwoVal == 2)
            return 1;
        if (playerTwoVal == 0)
            return 2;
        return 0;
    }
}

/**
 * This function loops continuously and asks the user for 2 integers to multiply
 */
void multiplication()
{
    xil_printf("Enter the multiplication string: \r\n");
    int selector = 0;
    int digit = 0;
    char num1[5] = "";
    char num2[5] = "";
    char input;
    while (1)
    {
        input = getc(stdin);
        if (input == '\r')
        {
            print("\r\n");
            break;
        }
        getchar(); // get rid of the nullbyte
        if (isdigit(input))
        {
            if (selector == 0)
                num1[digit] = input;
            else
                num2[digit] = input;
            digit++;
        }
        // Delimeters
        else if (input == '/' || input == '*' || input == ' ')
        {
            digit = 0;
            selector++;
        }
    }

    int n1 = atoi(num1);
    int n2 = atoi(num2);
    int res = n1 * n2;

    xil_printf("%d * %d = %d\r\n", n1, n2, res);
    if (res > 100)
    {
        XGpio_DiscreteWrite(&led_output, 1, 1);
    }
    else
    {
        XGpio_DiscreteWrite(&led_output, 1, 0);
    }
}
